var app=angular.module("boolean-algebra");app.directive("contenteditable",function(){return{restrict:"A",scope:{expression:"=bindExpression"},link:function($scope,$element,$attr){var expression=$scope.expression,isForbiddenKey=function(e){return e.keyCode==KEY_SPACE||e.keyCode==KEY_COMMA||e.keyCode==KEY_DOT},tmpCaretPosition=0;$element.on("keydown",function(e){return isForbiddenKey(e)?(e.preventDefault(),!1):(tmpCaretPosition=DomUtils.getCaretCharacterOffsetWithin($element.get(0)),void console.log(tmpCaretPosition))}).on("keyup change",function(e){if("keyup"==e.type){if(e.keyCode==KEY_CONTROL||e.keyCode==KEY_SPACE)return e.preventDefault(),!1;if(e.keyCode==KEY_LEFT||e.keyCode==KEY_RIGHT||e.keyCode==KEY_DOWN||e.keyCode==KEY_UP)return!0}var text=$element.text().toUpperCase();expression.parse(text);var position=DomUtils.getCaretCharacterOffsetWithin($element.get(0)),textLength=expression.text.length;$element.html(expression.getHtml());var newTextLength=expression.text.length;textLength!=newTextLength&&(console.log("textLength: "+textLength),console.log("newTextLength: "+newTextLength)),DomUtils.setCaretPosition($element.get(0),position)||console.log(tmpCaretPosition)})}}}),app.directive("boolExpr",function($parse,$sce){return{restrict:"E",replace:!0,templateUrl:"directives/boolExpr/boolExpr.html",scope:{group:"=",expression:"=bindExpression"},link:function($scope,$element,$attr){var $input=$element.find(".input"),updateExpressions=function(newGroup){BAGroup.useGroup(domain.expression,newGroup)};$scope.group?$scope.expression=$scope.group.expression:$scope.expression||($scope.expression=new BAExpression($attr.boolValue||"")),$input.html($scope.expression.getHtml()),$scope.symbol=$attr.boolSymbol,$scope.symbolSmall=$attr.boolSymbolSmall,$scope.expression.$input=$input;var domain=app.domains[$attr.boolDomain];domain&&!$scope.group&&(domain.expression=$scope.expression),$scope.group&&updateExpressions($scope.group),$scope.addChar=function(char){DomUtils.pasteHtmlAtCaret(char),$input.change()},$scope.clearText=function(){$scope.expression.parse(""),$scope.expression.updateInput()},$scope.groupButton=function(){var selText=DomUtils.getSelectedText();if(0!=selText.length){if(!BAExpression.validSyntax(selText))return void alert("Wrong Syntax "+selText);var newGroup=new BAGroup(selText);BAGroup.add(newGroup),updateExpressions(newGroup)}},$scope.removeGroup=function(){for(var group=$scope.group,index=-1,i=0;i<BAGroup.groups.length;i++){var g=BAGroup.groups[i];g.key!=group.key?g.expression.unuseGroup(group):index=i}domain.expression.unuseGroup(group),index>-1&&BAGroup.groups.splice(index,1)}}}});var app=angular.module("boolean-algebra");app.directive("boolInput",function($parse,$sce){return{restrict:"E",replace:!0,scope:!0,templateUrl:"directives/boolInput/boolInput.html",link:function($scope,$element,$attr){$scope.expression=new BAExpression("¬A∧B∨C∧B∧B"),$scope.groups=BAGroup.groups,BAGroup.add(new BAGroup("A"+SYMBOL_OR+"B")),BAGroup.add(new BAGroup("B"+SYMBOL_OR+"C")),$scope.expression.useAllGroups();var testExpr=function(expr,letters){console.log("TEST: "+expr.text);for(var max=Math.pow(2,letters.length),l=0;l<max;l++){for(var bitLine={},lTemp=l,i=letters.length-1;i>=0;i--){var v=0,vTemp=Math.pow(2,i);lTemp>=vTemp&&(lTemp-=vTemp,v=1);var letter=letters[letters.length-1-i];bitLine[letter]=v}console.log(bitLine),console.log(expr.getResult(bitLine))}};testExpr($scope.expression,["A","B","C"]);var domain=app.domains[$attr.boolDomain];domain&&(domain.expression=$scope.expression),$scope.boolDomain=$attr.boolDomain}}});var app=angular.module("boolean-algebra");app.directive("boolTable",function($parse,$sce){return{restrict:"E",replace:!0,scope:!0,templateUrl:"directives/boolTable/boolTable.html",link:function($scope,$element,$attr){$attr.boolSymbol?$scope.symbol=$attr.boolSymbol:$scope.symbol="F";var $table=$element.find("table"),domain=($table[0],app.domains[$attr.boolDomain]);domain||alert("Es wurde keine Domain gefunden!"),$scope.expression=domain.expression,$scope.checkResult=function(){console.log("CHECK RESULT")},domain.tableRefresh=function(){$scope.table=new BATable(domain.expression.rootNode,domain.groups),$scope.table.ths=[],$scope.table.bits=[];var i,ths=$scope.table.getTheadData();for(i=0;i<ths.letters.length;i++)$scope.table.ths.push({name:ths.letters[i],"class":"letters"});for(i=0;i<ths.groups.length;i++)$scope.table.ths.push({name:ths.groups[i],"class":"groups"});$scope.table.ths.push({name:"F","class":"result"}),domain.table=$scope.table;for(var lettersCount=ths.letters.length,max=Math.pow(2,lettersCount),l=0;l<max;l++){var bitLine={letters:[],groups:[],clips:[]},lTemp=l;for(i=lettersCount-1;i>=0;i--){var v=0,vTemp=Math.pow(2,i);lTemp>=vTemp&&(lTemp-=vTemp,v=1),bitLine.letters.push({value:v})}for(i=0;i<ths.groups.length;i++)bitLine.groups.push({value:0});bitLine.result={value:0},$scope.table.bits.push(bitLine)}},domain.tableRefresh()}}});