/**
 * Created by Sergej Görzen on 04.09.2016.
 */
var app = angular.module('boolean-algebra');
app.filter('rawHtml', ['$sce', function($sce){
    return function(val) {
        return $sce.trustAsHtml(val);
    };
}]);

var _boolInputCounter = 0;
app.directive('boolInput', function(){
    return {
        restrict: 'E',
        replace:true,
        scope:true,
        templateUrl: "directives/boolInput/boolInput.html",
        link: function($scope, $element, $attr) {
            /* Id direkt in einer Var interpretierren */
            var id;
            if ($attr.id) {
                $scope.id = $attr.id;
                id = $attr.id;
            } else {
                id = $scope.id = "boolInput" + _boolInputCounter++;
            }

            var $input = $element.find('.input');
            var input = $input[0];
            /* interpretierte id dem input zuweisen */
            input.id = id;

            var $boolTable = angular.element($attr.boolTable);

            /* das Ziel muss vom Typ TABLE sein */
            if ($boolTable[0].nodeName != "TABLE") {
                alert("boolInput.js: target is not <table>");
                return;
            }

            var selection = {
                start: -1,
                end: -1,
                text: ''
            };

            $scope.groups = [];
            var groupMax = 1;
            var formula = null;


            $element.find('[focusable="false"]').on('mousedown', function(e){
                e.preventDefault();
            });

            /* Gruppen Nummer hochzählen */
            var getGroupKey = function(){
                return 'G' + groupMax++;
            };

            var updateFormula = function(text) {
                formula = new Formula(text);
                var position = DomUtils.getCaretCharacterOffsetWithin($input.get(0));
                $input.html(formula.getHtml());
                DomUtils.setCaretPosition($input.get(0),position);
            };

            var to;
            $input.change(function(){
                clearTimeout(to);
                to = setTimeout(function(){
                    var text = $input.text();

                },500);
            }).keyup(function(e){

                if (e.keyCode != KEY_LEFT && e.keyCode != KEY_RIGHT && e.keyCode != KEY_UP && e.keyCode != KEY_DOWN) {
                    //$input.text($input.text().replace('-',SYMBOL_NEG).replace(',', SYMBOL_AND).replace('.', SYMBOL_OR)).change();
                }

            }).keydown(function(e){

                if (e.key == '0' || e.key == '1' ||
                    e.keyCode == KEY_BACKSPACE || e.keyCode == KEY_LEFT || e.keyCode == KEY_RIGHT || e.keyCode == KEY_UP || e.keyCode == KEY_DOWN) {
                    return true;
                }
                if (! (e.keyCode >= KEY_A && e.keyCode <= KEY_Z
                    || e.key == '-' || e.key == '(' || e.key == ')'
                    || e.keyCode == KEY_COMMA || e.keyCode == KEY_DOT) ) {
                    return false;
                }
                var char = e.key.toUpperCase();
                DomUtils.pasteHtmlAtCaret(char);
                updateFormula($input.text());
                return false;
            });

            $scope.addChar = function(char){
                if (document.activeElement.id != input.id || document.activeElement.className != input.className) return false;
                DomUtils.pasteHtmlAtCaret(char);
                updateFormula($input.text());
            };

            $scope.groupButton = function(){
                var text = $input.text();
                var selText = DomUtils.getSelectedText();
                if (text.length == 0) return true;
                var g = new Formula(text);
                if (!g.isValid()) {
                    alert("'" + selection.text + "' is not a valid group.");
                    return true;
                }
                var groupKey = getGroupKey();
                $scope.groups.push({key: groupKey, formula: g, formulaHtml: g.getHtml()});
                var newText = text.replace(selText, groupKey);
                updateFormula(newText);
                $input.focus();
            };
        }
    };
});